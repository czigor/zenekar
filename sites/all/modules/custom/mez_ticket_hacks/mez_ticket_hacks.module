<?php

/**
 * @file
 * Ticket related stuff
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mez_ticket_hacks_form_commerce_checkout_form_review_alter(&$form, $form_state) {
  $fields = [
    'commerce_cib_eki_user',
    'commerce_cib_msg',
    'commerce_cib_history',
    'commerce_cib_anum',
    'commerce_cib_end',
    'commerce_cib_start',
  ];
  foreach ($fields as $field) {
    $form['commerce_payment']['payment_details'][$field]['#access'] = FALSE;
  }
}

/**
 * Implements hook_permission().
 */
function mez_ticket_hacks_permission() {
  return array(
    'administer mez ticket selling' => array(
      'title' => t('Administer ticket selling'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function mez_ticket_hacks_field_formatter_info() {
  return array(
    'mez_concert_hall' => array(
      'label' => t('MEZ concert hall'),
      'field types' => array('list_text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mez_ticket_hacks_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'mez_concert_hall' :
      $path = drupal_get_path('theme', 'mez_bootstrap') . '/css/tickets.css';
      drupal_add_css($path);

      drupal_add_js('misc/ajax.js');
      if (mez_ticket_plan_visible($entity)) {
        $concert_hall = field_get_items('node', $entity, 'field_location_reference');
        $vars = array(
          'concert_nid' => $entity->nid,
          'concert_hall_nid' => $concert_hall[0]['target_id'],
        );
        $markup = theme('mez_concert_hall', $vars);
        $element[0] = array('#markup' => $markup);
      }
      else {
          $element[0] = array('#markup' => '');
      }
      break;
  }
  return $element;
}

function mez_ticket_plan_visible($concert) {
  if (isset($concert->type) && ($concert->type == 'concert')) {
    global $user;
    $ticket_selling = field_get_items('node', $concert, 'field_ticket_selling');
    if (($ticket_selling[0]['value'] == 'admin' && user_access('administer mez ticket selling')) || $ticket_selling[0]['value'] == 'on') {
      // If there's only half an hour to the concert, turn ticket selling off.
      $time = field_get_items('node', $concert, 'field_time');
      $time = new DateTime($time[0]['value']);
      $seconds_to_concert = $time->getTimestamp()- REQUEST_TIME;
      if ($seconds_to_concert < 30 * 60 ) {
        $concert->field_ticket_selling[LANGUAGE_NONE][0]['value'] = 'off';
        node_save($concert);
        return FALSE;
      }
      // Else show the ticket map.
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function mez_ticket_hacks_theme() {
  return array(
    'mez_concert_hall' => array(
      'variables' => array(
        'concert_nid' => NULL,
        'concert_hall_nid' => NULL,
       ),
      'template' => 'mez_concert_hall',
      'path' => drupal_get_path('theme', 'mez_bootstrap') . '/templates',
    ),
    'mez_ticket' => array(
      'variables' => array(
        'seat' => NULL,
        'ticket' => NULL,
      ),
    ),
    'mez_ticket_pdf' => array(
      'variables' => array(
        'order' => NULL,
      ),
      'template' => 'mez_ticket_pdf',
      'path' => drupal_get_path('theme', 'mez_bootstrap') . '/templates/pdf',
    ),
  );
}

/**
 * Theme function for ticket.
 */
function theme_mez_ticket($vars) {
  if (isset($vars['xcoord']) && isset($vars['ycoord'])) {
    $markup = '<div id="mez-ticket-' . $vars['seat_nid'] . '" class="mez-ticket ' . $vars['status'] . ' mez-ticket-price-' . $vars['price'] . '" style="position:absolute; top:' . $vars['ycoord'] . 'px; left: ' . $vars['xcoord'] . 'px;">';
    $text = '<span class="inner" title="' . $vars['title'] . '"></span>';
    switch ($vars['status']) {
      case 'free' :
        $markup .= l($text, 'mez-ticket-to-cart/nojs/' . $vars['ticket']->product_id, array('attributes' => array('class' => array('use-ajax')), 'html' => TRUE));
        break;

      case 'reserved' :
        $markup .= l($text, 'mez-ticket-from-cart/nojs/' . $vars['ticket']->product_id, array('attributes' => array('class' => array('use-ajax')), 'html' => TRUE));
        break;

      default :
        $markup .= $text;
    }
    $markup .= '</div>';
    return $markup;
  }
}

/**
 * Preprocess function for mez_concert_hall.
 */
function mez_ticket_hacks_preprocess_mez_concert_hall(&$vars) {
  // Seats
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'seat')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_concert_hall', 'target_id', $vars['concert_hall_nid'])
    ->execute();
  if (!isset($result['node'])) {
    return;
  }
  $seat_nids = array_keys($result['node']);

  // Tickets
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', 'ticket')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_concert', 'target_id', $vars['concert_nid'])
    ->fieldCondition('field_seat', 'target_id', $seat_nids)
    ->execute();
  if (!empty($result['commerce_product'])) {
    $ticket_pids = array_keys($result['commerce_product']);

    $tickets = commerce_product_load_multiple($ticket_pids);
    $vars['seats'] = array();
    foreach ($tickets as $ticket) {
      $seat_nid = field_get_items('commerce_product', $ticket, 'field_seat');
      $vars['seats'][$seat_nid[0]['target_id']] = theme('mez_ticket', array('ticket' => $ticket));
      $key = array_search($seat_nid[0]['target_id'], $seat_nids);
      unset($seat_nids[$key]);
    }
  }
  $seats = node_load_multiple($seat_nids);
  foreach ($seats as $seat) {
    $vars['seats'][$seat->nid] = theme('mez_ticket', array('seat' => $seat));
  }

  // Concert hall specific markup.
  $function = 'concert_hall_' . $vars['concert_hall_nid'];
  ctools_include($function, 'mez_ticket_hacks', 'concert_halls');
  $vars['concert_hall_details'] = $function($vars['concert_hall_nid'], $vars['concert_nid']);
}

/**
 * Preprocess function for mez_ticket.
 */
function mez_ticket_hacks_preprocess_mez_ticket(&$vars) {
  if (isset($vars['ticket'])) {
    // Tickets in the cart differs for all users.
    $tickets_in_cart = _mez_tickets_in_cart();
    $ticket_w = entity_metadata_wrapper('commerce_product', $vars['ticket']);
    $compression = &drupal_static('mez_compression');
    if (!isset($compression)) {
      $compression = $ticket_w->field_seat->field_concert_hall->field_ticket_map_compression->value();
      if (empty($compression)) {
        $compression = 1;
      }
    }
    $vars['xcoord'] = $ticket_w->field_seat->field_x_coordinate->value() / $compression;
    $vars['ycoord'] = $ticket_w->field_seat->field_y_coordinate->value() / $compression;
    $seat = $ticket_w->field_seat->value();
    $title = field_get_items('node', $seat, 'title_field');
    $vars['title'] = $title[0]['value'] . ' ' . $ticket_w->commerce_price->amount->value() . ' Ft';

    $vars['seat_nid'] = $ticket_w->field_seat->nid->value();
    $vars['status'] = ($ticket_w->commerce_stock->value() > 0 ? 'free' : 'sold');
    $vars['price'] = $ticket_w->commerce_price->amount->value();
    if ($vars['status'] == 'free') {
      $vars['status'] = in_array($vars['ticket']->product_id, $tickets_in_cart) ? 'reserved' : 'free';
    }
    $vars['location_title'] = $ticket_w->field_seat->field_concert_hall->title->value();
    $loc = $ticket_w->field_seat->field_concert_hall->field_location;
    $vars['location_address'] = $loc->postal_code->value() . ' ' . $loc->city->value() . ', ' .  $loc->street->value();
    $vars['time'] = format_date(strtotime($ticket_w->field_concert->field_time->value()[0]['value']), 'long');
  }
  else {
    $seat = $vars['seat'];
    $compression = &drupal_static('mez_compression');
    if (!isset($compression)) {
      $seat_w = entity_metadata_wrapper('node', $vars['seat']);
      $compression = $seat_w->field_concert_hall->field_ticket_map_compression->value();
      if (empty($compression)) {
        $compression = 1;
      }
    }
    $xcoord = field_get_items('node', $seat, 'field_x_coordinate');
    $vars['xcoord'] = $xcoord[0]['value'] / $compression;
    $ycoord = field_get_items('node', $seat, 'field_y_coordinate');
    $vars['ycoord'] = $ycoord[0]['value'] / $compression;
    $vars['status'] = 'sold';
    $title = field_get_items('node', $seat, 'title_field');
    $vars['title'] = $title[0]['value'];
    $vars['seat_nid'] = $seat->nid;
    $vars['price'] = 0;
  }
}

/**
 * Preprocess function for mez_ticket_pdf.
 */
function mez_ticket_hacks_preprocess_mez_ticket_pdf(&$vars) {
  $order = $vars['order'];
  $order_w = entity_metadata_wrapper('commerce_order', $order);
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $vars['env'] = $payment_method['settings']['env'];

  $tickets = array();
  foreach ($order_w->commerce_line_items as $cli) {
    $seat = $cli->commerce_product->language('hu')->field_seat->title_field->value();
    $price = $cli->commerce_unit_price->amount->value();
    $tickets[] = array(
      'seat' => $seat,
      'price' => $price,
      'id' => $cli->commerce_product->product_id->value(),
	  'concert_id' => (int) (explode('-', $cli->commerce_product->sku->value())[0]),
    );
  }
  $vars['tickets'] = $tickets;
}

/**
 * Get the tickets in the cart.
 */
function _mez_tickets_in_cart() {
   $tickets_in_cart = &drupal_static(__FUNCTION__);
   if (!isset($tickets_in_cart)) {
     global $user;

     $order = commerce_cart_order_load($user->uid);
     $tickets_in_cart = array();
     if (!empty($order)) {
       $order_w = entity_metadata_wrapper('commerce_order', $order);

       foreach ($order_w->commerce_line_items as $line_item_w) {
         $tickets_in_cart[$line_item_w->line_item_id->value()] = $line_item_w->commerce_product->product_id->value();
       }
     }
   }
  return $tickets_in_cart;
}

/**
 * Implements hook_menu().
 */
function mez_ticket_hacks_menu() {
  $items = array();
  // These are CSRF security holes. We need a token.
  $items['mez-ticket-to-cart/%/%commerce_product'] = array(
    'page callback' => 'mez_ticket_to_cart',
    'page arguments' => array(1, 2),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  $items['mez-ticket-from-cart/%/%commerce_product'] = array(
    'page callback' => 'mez_ticket_from_cart',
    'page arguments' => array(1, 2),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * AJAX callback
 */
function mez_ticket_to_cart($type = 'ajax', $ticket) {
  if ($type == 'ajax') {
    commerce_cart_product_add_by_id($ticket->product_id);
    $markup = commerce_cart_block_view('cart');

    $commands = array();
    // Replace cart block
    $commands[] = ajax_command_html('.mez_concert_shopping_cart .cart-empty-block', $markup['content']);
    $commands[] = ajax_command_html('.mez_concert_shopping_cart .cart-contents', $markup['content']);
    // Replace ticket
    $seat_nid = field_get_items('commerce_product', $ticket, 'field_seat');
    $commands[] = ajax_command_replace('#mez-ticket-' . $seat_nid[0]['target_id'], theme('mez_ticket', array('ticket' => $ticket)));

    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
}


/**
 * AJAX callback
 */
function mez_ticket_from_cart($type = 'ajax', $ticket) {
  global $user;
  if ($type == 'ajax') {
    $tickets_in_cart = _mez_tickets_in_cart();
    $line_item_id = array_search($ticket->product_id, $tickets_in_cart);
    $order = commerce_cart_order_load($user->uid);
    commerce_cart_order_product_line_item_delete($order, $line_item_id);
    $markup = commerce_cart_block_view('cart');


    $commands = array();
    $ajax_settings = array(
      'progress' => array('type' =>  'none'),
    );
    // Replace cart block.
    $commands[] = ajax_command_html('.mez_concert_shopping_cart .cart-empty-block', $markup['content']);
    $commands[0]['progress'] =  array('type' =>  'none');
    $commands[] = ajax_command_html('.mez_concert_shopping_cart .cart-contents', $markup['content']);
    $commands[1]['progress'] =  array('type' =>  'none');
    // Replace ticket
    $seat_nid = field_get_items('commerce_product', $ticket, 'field_seat');
    $commands[] = ajax_command_replace('#mez-ticket-' . $seat_nid[0]['target_id'], theme('mez_ticket', array('ticket' => $ticket)));
    $commands[2]['progress'] =  array('type' =>  'none');
    $commands[] = ajax_command_prepend(NULL, theme('status_messages'));

    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
}

/**
 * Implements hook_commerce_cart_product_remove().
 */
function mez_ticket_hacks_commerce_cart_product_remove($order, $product, $quantity, $line_item) {
  drupal_static_reset('_mez_tickets_in_cart');
}

/**
 * Implements hook_commerce_cart_product_add().
 */
function mez_ticket_hacks_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  drupal_static_reset('_mez_tickets_in_cart');
}

/**
 * Implements hook_node_presave().
 */
function mez_ticket_hacks_node_presave($node) {
  if ($node->type == 'seat') {
    // Set seat node title to [floor] [side] [row]/[number] [extra].
    $title = array();

    foreach (array_keys(language_list()) as $lang) {
      $title[$lang][0]['value'] = '';
      $floor = field_get_items('node', $node, 'field_seat_floor');
      if ($floor) {
        $title[$lang][0]['value'] .= i18n_string('field:field_seat_floor:#allowed_values:' . $floor[0]['value'], $floor[0]['value'], array('langcode' => $lang)) . ' ';
      }
      $side = field_get_items('node', $node, 'field_seat_side');
      if ($side) {
        $title[$lang][0]['value'] .= i18n_string('field:field_seat_side:#allowed_values:' . $side[0]['value'], $side[0]['value'], array('langcode' => $lang));
      }
      $row = field_get_items('node', $node, 'field_seat_row');
      if ($row) {
        $title[$lang][0]['value'] .= t(', row @row', array('@row' => $row[0]['value']), array('langcode' => $lang));
      }
      $number = field_get_items('node', $node, 'field_seat_number');
      if ($number) {
        $title[$lang][0]['value'] .= t(', seat @seat', array('@seat' => $number[0]['value']), array('langcode' => $lang));
      }
      $extra = field_get_items('node', $node, 'field_seat_extra', $lang);
      if ($extra) {
        $title[$lang][0]['value'] .= ' ' . $extra[0]['value'];
      }
    }
    $node->title_field = $title;
    global $language;
    $node->title = $title[$language->language][0]['value'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mez_ticket_hacks_form_seat_node_form_alter(&$form, &$form_state) {
  $form['title_field'][0]['#required'] = FALSE;
  $form['title_field']['#access'] = FALSE;
}

/**
 * Implements hook_commerce_product_presave().
 */
function  mez_ticket_hacks_commerce_product_presave($product) {
  $seat_nid = field_get_items('commerce_product', $product, 'field_seat');
  $concert_nid = field_get_items('commerce_product', $product, 'field_concert');
  $product->sku = $concert_nid[0]['target_id'] . '-' . $seat_nid[0]['target_id'];
  $seat_w = entity_metadata_wrapper('node', $seat_nid[0]['target_id']);
  $concert_w = entity_metadata_wrapper('node', $concert_nid[0]['target_id']);
  // Tickets have only Hungarian titles.
  $seat_floor = i18n_string('field:field_seat_floor:#allowed_values:' . $seat_w->field_seat_floor->value(), $seat_w->field_seat_floor->value());
  $seat_side = i18n_string('field:field_seat_side:#allowed_values:' . $seat_w->field_seat_side->value(), $seat_w->field_seat_side->value());
  $product->title = $concert_w->language('hu')->title_field->value() . ', ' . $seat_floor . ', ' . $seat_side . ' ' . $seat_w->field_seat_row->value() . '. sor ' . $seat_w->field_seat_number->value() . '. szék';;
}

/**
 * Implements hook_action_info().
 */
function mez_ticket_hacks_action_info() {
  return array(
    'mez_ticket_from_seat' => array(
      'type' => 'node',
      'label' => t('Create ticket from seat'),
      'configurable' => TRUE,
    ),
  );
}

/**
 * Implements hook_action_form().
 *
 * Adds configuration fields for setting the student's new payment date.
 */
function mez_ticket_from_seat_form($context) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'concert')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_ticket_selling', 'value', 'off', '<>')
    ->execute();
  if (!empty($result['node'])) {
    $concert_nids = array_keys($result['node']);
    $concerts = node_load_multiple($concert_nids);

    $concert_options = array();
    foreach ($concerts as $concert) {
      $title = field_get_items('node', $concert, 'title_field');
      $concert_options[$concert->nid] = $title[0]['value'];
    }

    $form = array();
    $form['mez_ticket_concert'] = array(
      '#type' => 'select',
      '#title' => t('Concert'),
      '#description' => t('Concerts having ticket selling different from "off".'),
      '#required' => TRUE,
      '#options' => $concert_options,
    );

    $form['mez_ticket_price'] = array(
      '#type' => 'textfield',
      '#title' => t('Price (HUF)'),
      '#element_validate' => array('element_validate_integer'),
    );
  }
  else {
    $form['mez_noconcert'] = array(
      '#markup' => t('There are no concerts having ticket selling different from "off".')
    );
  }
  return $form;
}

/**
 * Implements hook_submit().
 */
function mez_ticket_from_seat_submit($form, $form_state) {
  if (!empty($form_state['values']['mez_noconcert'])) {
    drupal_goto('seats');
  }
  return array(
    'concert' => $form_state['values']['mez_ticket_concert'],
    'price' => $form_state['values']['mez_ticket_price'],
  );
}

/**
 * Action callback.
 */
function mez_ticket_from_seat($node, $context) {
  if (!isset($node->type) || $node->type != 'seat' ) {
    return;
  }

  // Check if this seat belongs to the concert hall of the concert at all.
  $seat_concert_hall = field_get_items('node', $node, 'field_concert_hall');
  $concert = node_load($context['concert']);
  $concert_concert_hall = field_get_items('node', $concert, 'field_location_reference');
  if ($seat_concert_hall[0]['target_id'] != $concert_concert_hall[0]['target_id']) {
    $seat_title = field_get_items('node', $node, 'title_field');
    drupal_set_message(t('Seat @seat does not belong to the concert hall of the selected concert.', array('@seat' => $seat_title)));
    return;
  }

  // Check if we have a ticket already with this seat and concert.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', 'ticket')
    ->fieldCondition('field_concert', 'target_id', $context['concert'])
    ->fieldCondition('field_seat', 'target_id', $node->nid)
    ->execute();
  if (!empty($result['commerce_product'])) {
    $seat_title = field_get_items('node', $node, 'title_field');
    $concert = node_load($context['concert']);
    $concert_title = field_get_items('node', $concert, 'title_field');
    drupal_set_message(t('A ticket already exists for @concert concert and seat @seat.', array('@seat' => $seat_title, '@concert' => $concert_title)));
    return;
  }

  // Else create the ticket.
  $ticket = commerce_product_new('ticket');
  $ticket->field_concert[LANGUAGE_NONE][0]['target_id'] = $context['concert'];
  $ticket->commerce_price[LANGUAGE_NONE][0] = array(
    'amount' => $context['price'],
    'currency_code' => 'HUF',
  );
  $ticket->commerce_stock[LANGUAGE_NONE][0]['value'] = 1.00;
  $ticket->field_seat[LANGUAGE_NONE][0]['target_id'] = $node->nid;
  commerce_product_save($ticket);
  drupal_set_message(t('Ticket @title has been created.', array('@title' => $ticket->title)));
}

/**
 * Implements hook_cron().
 */
function mez_ticket_hacks_cron() {
  // If a checkout_payment order has not been modified for 15 minutes,
  // set the order status to canceled.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_order')
    ->propertyCondition('status', 'checkout_payment')
    ->propertyCondition('changed', REQUEST_TIME - 15 * 60, '<')
    ->execute();
  if (!empty($result['commerce_order'])) {
    $order_ids = array_keys($result['commerce_order']);
    $orders = commerce_order_load_multiple($order_ids);
    foreach ($orders as $order) {
      commerce_order_status_update($order, 'canceled');
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function mez_ticket_hacks_field_extra_fields() {
  $extra['node']['concert'] = array(
    'display' => array(
      'mez_concert_shopping_cart' => array(
        'label' => t('Shopping cart'),
        'description' => t('Shopping cart for ticket selling'),
        'weight' => -4,
      ),
      'mez_concert_bank_info' => array(
        'label' => t('Bank information'),
        'description' => t('CIB Bank information'),
        'weight' => -6,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_view_alter().
 */
function mez_ticket_hacks_entity_view_alter(&$build, $type) {
  $entities = field_info_bundles();
  foreach ($entities as $entity) {
    foreach ($entity as $bundle) {
      if (isset($bundle['layouts'][$build['#view_mode']]['settings']['fields'])) {
        $fields_to_display = array_keys($bundle['layouts'][$build['#view_mode']]['settings']['fields']);
        global $user;

        // Shopping cart
        if (in_array('mez_concert_shopping_cart', $fields_to_display) && $type == 'node') {
          if (isset($build['#node']) && !mez_ticket_plan_visible($build['#node'])) {
            return ;
          }
          $cart = commerce_cart_block_view('cart');
          $title = $cart['subject'];
          $build['mez_concert_shopping_cart'] = array(
            '#markup' => '<h2 class="shopping-cart-title">' . $title . '</h2>' . $cart['content'],
            '#prefix' => '<div class="mez_concert_shopping_cart">',
            '#suffix' => '</div>',
          );
        }

        // Bank information
        if (in_array('mez_concert_bank_info', $fields_to_display) && $type == 'node') {
          if (isset($build['#node']) && !mez_ticket_plan_visible($build['#node'])) {
            return ;
          }
          $block = mez_ticket_hacks_block_view('cib_infos');
          $build['mez_concert_bank_info'] = array(
            '#markup' => drupal_render($block),
            '#prefix' => '<div class="mez_concert_bank_info">',
            '#suffix' => '</div>',
          );
        }
      }
    }
  }
}

/**
 * Preprocess fucntion for the Shopping cart block.
 */
function mez_ticket_hacks_preprocess_commerce_cart_block(&$vars) {
  $vars['contents_view'] = commerce_embed_view('mez_shopping_cart_block', 'defaults', array($vars['order']->order_id), $_GET['q']);
}

/**
 * Implements hook_block_info().
 */
function mez_ticket_hacks_block_info() {
   $blocks['cib_infos'] = array(
    'info' => t('CIB Bank logos and info'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mez_ticket_hacks_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'cib_infos':
      $content = array();
      $variables = array(
        'path' => drupal_get_path('module', 'mez_ticket_hacks') . '/images/CIB_logo_30px.png',
        'alt' => t('Bank card payment provider: CIB Bank Inc.'),
        'title' => t('Bank card payment provider: CIB Bank Inc.'),
      );
      $content['mez_concert_bank_logo'] = array(
        '#markup' => theme('image', $variables),
        '#prefix' => '<div class="mez_concert_bank_logo">',
        '#suffix' => '</div>',
        '#weight' => -10,
      );
      $variables = array(
        'path' => drupal_get_path('module', 'mez_ticket_hacks') . '/images/Kartyalogok_30px.png',
        'alt' => t('Accepted cards'),
        'title' => t('Accepted cards'),
      );
      $content['mez_concert_bankcard_logos'] = array(
        '#markup' => theme('image', $variables),
        '#prefix' => '<div class="mez_concert_bankcard_logos">',
        '#suffix' => '</div>',
        '#weight' => -5,
      );
      $content['mez_concert_bank_information'] = array(
        '#markup' => l(t('Payment information'), 'node/166') . ' ' . l(t('Bank information'), 'node/165'),
        '#prefix' => '<div class="mez_concert_bank_information">',
        '#suffix' => '</div>',
        '#weight' => 0,
      );

      $block['subject'] = NULL;
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Implements hook_token_info().
 */
function mez_ticket_hacks_token_info() {
  return array(
    'tokens' => array(
      'commerce-order' => array(
        'summary' => array(
          'name' => t("Order summary"),
          'description' => t("The ordered products with price and the total."),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function mez_ticket_hacks_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  $sanitize = !empty($options['sanitize']);

  if ($type == 'commerce-order' && !empty($data['commerce-order'])) {
    $order = $data['commerce-order'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Order summary
        case 'summary':
          $order_w = entity_metadata_wrapper('commerce_order', $order->order_id);
          $items = array();
          foreach ($order_w->commerce_line_items as $li_w) {
            $items[] = $li_w->commerce_product->title->value() . ' - ' . $li_w->commerce_product->commerce_price->amount->value() . ' ' . $li_w->commerce_product->commerce_price->currency_code->value();
          }
          $summary = theme('item_list', array('items' => $items, 'type' => 'ul', 'title' => t('Your order:')));
          $summary .= t('Total:') . ' ' . $order_w->commerce_order_total->amount->value() . ' ' . $order_w->commerce_order_total->currency_code->value();
          $replacements[$original] = $summary;
          break;
      }
    }
  }
  return $replacements;
}
