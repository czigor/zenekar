<?php
/**
 * @file
 * Tests for ns_prod_blog.
 */

/**
 * Base test case for blog product tests.
 */
class NSProdBlogTestCase extends NodeStreamWebTestCase {

  /**
   * @see DrupalWebTestCase::setUp().
   */
  function setUp() {
    parent::setUp('ns_prod_blog');
  }

  /**
   * Get a test blog node.
   */
  protected function getTestBlogNode($lang, $contributor_nid = NULL) {
    $title = $this->randomName();
    $test_file = $this->createTestFile();
    $node = array(
      'type' => 'ns_blog',
      'language' => $lang,
      'title' => $title,
      'title_field' => array($lang => array(array('value' => $title))),
      'body' => array($lang => array(array('value' => ''))),
      'field_ns_blog_description_long' => array($lang => array(array('value' => $this->loremIpsum()))),
      'field_ns_blog_description_short' => array($lang => array(array('value' => $this->randomString()))),
      'field_ns_blog_image' => array(
        $lang => array(
          array(
            'fid' => $test_file->fid,
            'display' => TRUE,
          ),
        ),
      ),
    );
    if (isset($contributor_nid)) {
      $node['field_ns_blog_blogger'] = array($lang => array(array('target_id' => $contributor_nid)));
    }
    return $node;
  }

  protected function getTestContributorNode($lang) {
    $title = $this->randomName();
    $test_file = $this->createTestFile();
    return array(
      'type' => 'ns_contributor',
      'language' => $lang,
      'title' => $title,
      'title_field' => array($lang => array(array('value' => $title))),
      'body' => array($lang => array(array('value' => ''))),
      'field_ns_contributor_about' => array($lang => array(array('value' => $this->loremIpsum()))),
      'field_ns_contributor_email' => array($lang => array(array('value' => 'example@nodene.se'))),
      'field_ns_contributor_photo' => array($lang => array(array('fid' => $test_file->fid, 'display' => TRUE))),
      'field_ns_contributor_user' => array($lang => array(array('target_id' => 1))),
    );
  }

  /**
   * Get a test blog post node.
   */
  protected function getTestBlogPostNode($lang, $blog_nid) {
    $test_file = $this->createTestFile();
    $title = $this->randomName();
    return array(
      'type' => 'ns_blog_post',
      'language' => $lang,
      'title' => $title,
      'title_field' => array($lang => array(array('value' => $title))),
      'body' => array($lang => array(array('value' => ''))),
      'field_ns_blog_post_blog' => array('und' => array(array('target_id' => $blog_nid))),
      'field_ns_blog_post_body' => array($lang => array(array('value' => $this->loremIpsum()))),
      'field_ns_blog_description_short' => array($lang => array(array('value' => $this->randomString()))),
      'field_ns_blog_post_media' => array(
        $lang => array(
          array(
            'fid' => $test_file->fid,
            'display' => TRUE,
          ),
        ),
      ),
    );
  }
}

/**
 * Test translatability with entity translation.
 */
class NSProdBlogTranslationTest extends NSProdBlogTestCase {

  /**
   * @see parent::getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Field translation',
      'description' => 'Test that the blog product plays ball with the nodestream field translation feature.',
      'group' => 'NodeStream blog'
    );
  }

  /**
   * @see parent::setUp().
   */
  function setUp() {
    parent::setUp();
    // We need to indicate that we don't want to run a batch.
    variable_set('ns_field_translation_skip_batch', TRUE);
    module_enable(array('ns_field_translation'));
  }

  /**
   * Test that untranslated content isn't shown unnecessarily.
   */
  public function testLanguageCheck() {
    // Add a langauge
    locale_add_language('sv');
    // Go to the blogs page, the item should not be listed.
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $this->_testBlogLanguage();
    $this->_testBlogPostLanguage();
  }

  /**
   * Test that the language filter works for blogs.
   */
  protected function _testBlogLanguage() {
    // Create a swedish blog.
    $node_sv = $this->drupalCreateNode($this->getTestBlogNode('sv'));
    $this->drupalGet('blogs');
    $this->assertNoText($node_sv->title, 'The node does not show up on the english listing.');
    $node_en = $this->drupalCreateNode($this->getTestBlogNode('en'));
    $this->drupalGet('blogs');
    $this->assertText($node_en->title, 'The node shows up on the english listing.');
    $node_und = $this->drupalCreateNode($this->getTestBlogNode('und'));
    $this->drupalGet('blogs');
    $this->assertText($node_und->title, 'Language neutral nodes shows up in the listing.');
  }

  /**
   * Test that the language filter works for blog posts.
   */
  protected function _testBlogPostLanguage() {
    // Create a swedish blog post.
    $blog = $this->drupalCreateNode($this->getTestBlogNode('und'));
    $node_sv = $this->drupalCreateNode($this->getTestBlogPostNode('sv', $blog->nid));
    $this->drupalGet('blogs');
    $this->assertNoText($node_sv->title, t('The blog post does not show up on the english listing.'));
     $node_en = $this->drupalCreateNode($this->getTestBlogPostNode('en', $blog->nid));
    $this->drupalGet('blogs');
    $this->assertText($node_en->title, 'The node shows up on the english listing.');
     $node_und = $this->drupalCreateNode($this->getTestBlogPostNode('und', $blog->nid));
    $this->drupalGet('blogs');
    $this->assertText($node_und->title, 'Language neutral nodes shows up in the listing.');
    // The neutral node and the english node should show up in the listing.
    $this->drupalGet('node/' . $blog->nid);
    $this->assertText($node_en->title, 'The english node is shown in the blog listing when the language matches');
    $this->assertText($node_und->title, 'The undefined node is shown in the blog listing');
  }
}

/**
 * Test blog representation.
 */
class NSProdBlogRepresentationTestCase extends NSProdBlogTestCase {
  /**
   * Enable contributor in addition to ns_prod_blog.
   */
  function setUp() {
    parent::setUp();
    module_enable(array('ns_contributor'));
    defaultconfig_optional_save('ns_blog', 'field_default_fields', 'node-ns_blog-field_ns_blog_blogger', TRUE);
  }
   /**
    * @see parent::getInfo().
    */
  public static function getInfo() {
    return array(
      'name' => 'Blog representation',
      'description' => 'Test that blogs are represented properly.',
      'group' => 'NodeStream blog'
    );
  }

  /**
   * Test blog representation.
   */
  function testRepresentation() {
    $contributor = $this->drupalCreateNode($this->getTestContributorNode('und'));
    $node = $this->drupalCreateNode($this->getTestBlogNode('und', $contributor->nid));
    $file = $this->createTestFile();
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    // Go to the blogs page, the item should not be listed.
    $this->drupalGet('blogs');
    $this->assertText($node->title, 'Blog title exists.');
    $image = $this->xpath('//div[contains(@class, field-name-field-ns-blog-image)]/img[contains(@src, :file_name)]', array(':file_name' => $file->name));
    $this->assertTrue(count($image), 'Blog image is present');
    // Go to the blog page, we should have som info here.
    $this->drupalGet('node/' . $node->nid);
    $this->assertText($node->title, 'Blog title is present on the node page.');
    $fields = array(
      'field_ns_blog_description_long',
      'field_ns_blog_description_short',
    );
    foreach ($fields as $field) {
      $values = field_get_items('node', $node, $field);
      $this->assertTrue($values[0]['value']);
    }
    $this->assertText($contributor->title);
    $about_value = field_get_items('node', $contributor, 'field_ns_contributor_about');
    $this->assertText($about_value[0]['value'], 'Contributor about text is present.');
    $image = $this->xpath('//div[contains(@class, field-name-field-ns-contributor-photo)]/img[contains(@src, :file_name)]', array(':file_name' => $file->name));
    $this->assertTrue(count($image), 'Contributor photo is present');
    // Create a blog post and make sure it shows up in the listing.
    $blog_post = $this->drupalCreateNode($this->getTestBlogPostNode('und', $node->nid));
    $this->drupalGet('blogs');
    $this->assertText($blog_post->title, 'Blog post title is present');
    $body = field_get_items('node', $blog_post, 'field_ns_blog_post_body');
    $image = $this->xpath('//div[contains(@class, field-name-field-ns-blog-post-media)]/img[contains(@src, :file_name)]', array(':file_name' => $file->name));
    $this->assertTrue(count($image), 'Blog post image is present.');
    // Check that the blog post looks fine.
    $this->drupalGet('node/' . $blog_post->nid);
    $this->assertText($blog_post->title, 'Blog post title is present.');
    $this->assertText($node->title, 'Blog title is present');
    $short_description = field_get_items('node', $node, 'field_ns_blog_description_short');
    $this->assertText($body[0]['value'], 'Blog post body is present');
    $this->assertText($contributor->title, 'Contributor title is present');
    $this->assertText($about_value[0]['value'], 'Contributor about text is present.');
  }
}
