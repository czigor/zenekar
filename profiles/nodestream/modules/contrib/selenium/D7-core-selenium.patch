diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index bbddde2..c917715 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -2190,9 +2190,9 @@ function drupal_valid_test_ua() {
     // The file properties add more entropy not easily accessible to others.
     $key = $drupal_hash_salt . filectime(__FILE__) . fileinode(__FILE__);
     $time_diff = REQUEST_TIME - $time;
-    // Since we are making a local request a 5 second time window is allowed,
+    // Since we are making a local request a 600 second time window is allowed,
     // and the HMAC must match.
-    if ($time_diff >= 0 && $time_diff <= 5 && $hmac == drupal_hmac_base64($check_string, $key)) {
+    if ($time_diff >= 0 && $time_diff <= 600 && $hmac == drupal_hmac_base64($check_string, $key)) {
       $test_prefix = $prefix;
       return $test_prefix;
     }
diff --git a/modules/simpletest/drupal_web_test_case.php b/modules/simpletest/drupal_web_test_case.php
index b60c682..0c67d7b 100644
--- a/modules/simpletest/drupal_web_test_case.php
+++ b/modules/simpletest/drupal_web_test_case.php
@@ -45,6 +45,11 @@ abstract class DrupalTestCase {
   protected $timeLimit = 500;
 
   /**
+   * Browser that runs test.
+   */
+  protected $browser;
+
+  /**
    * Current results of this test case.
    *
    * @var Array
@@ -464,6 +469,12 @@ abstract class DrupalTestCase {
     foreach ($class_methods as $method) {
       // If the current method starts with "test", run it - it's a test.
       if (strtolower(substr($method, 0, 4)) == 'test') {
+        // Get information about test case.
+        $info = $this->getInfo();
+        // If no browsers are set we use internal.
+        if (!isset($info['browsers'])) {
+          $info['browsers'] = array('internal');
+        }
         // Insert a fail record. This will be deleted on completion to ensure
         // that testing completed.
         $method_info = new ReflectionMethod($class, $method);
@@ -472,18 +483,24 @@ abstract class DrupalTestCase {
           'line' => $method_info->getStartLine(),
           'function' => $class . '->' . $method . '()',
         );
-        $completion_check_id = DrupalTestCase::insertAssert($this->testId, $class, FALSE, t('The test did not complete due to a fatal error.'), 'Completion check', $caller);
-        $this->setUp();
-        try {
-          $this->$method();
-          // Finish up.
-        }
-        catch (Exception $e) {
-          $this->exceptionHandler($e);
+
+        // Run test in each browser.
+        foreach ($info['browsers'] as $browser) {
+          $this->browser = $browser;
+
+          $completion_check_id = DrupalTestCase::insertAssert($this->testId, $class, FALSE, t('The test did not complete due to a fatal error.'), 'Completion check', $caller);
+          try {
+            $this->setUp();
+            $this->$method();
+            // Finish up.
+          }
+          catch (Exception $e) {
+            $this->exceptionHandler($e);
+          }
+          $this->tearDown();
+          // Remove the completion check record.
+          DrupalTestCase::deleteAssert($completion_check_id);
         }
-        $this->tearDown();
-        // Remove the completion check record.
-        DrupalTestCase::deleteAssert($completion_check_id);
       }
     }
     // Clear out the error messages and restore error handler.
